// file: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODEL-MODEL YANG SUDAH ADA ---

model Property {
  id                   Int             @id @default(autoincrement())
  name                 String
  base_price_per_night Decimal         @db.Decimal(12, 2)
  pricingRules         PricingRule[]
  priceOverrides       PriceOverride[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // --- (DIPERBARUI) Relasi baru ditambahkan ---
  owner                User?           @relation(fields: [ownerId], references: [id]) // Properti bisa dimiliki User
  ownerId              Int?
  bookings             Booking[]       // Properti memiliki banyak booking
  transactions         Transaction[]   // Properti memiliki banyak transaksi
}

model PricingRule {
  id            Int      @id @default(autoincrement())
  propertyId    Int
  name          String
  start_date    DateTime @db.Date
  end_date      DateTime @db.Date
  min_price     Decimal  @db.Decimal(12, 2)
  max_price     Decimal  @db.Decimal(12, 2)
  default_price Decimal  @db.Decimal(12, 2)
  property      Property @relation(fields: [propertyId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PriceOverride {
  id            Int      @id @default(autoincrement())
  propertyId    Int
  override_date DateTime @db.Date
  price         Decimal  @db.Decimal(12, 2)
  property      Property @relation(fields: [propertyId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([propertyId, override_date])
}


// --- (BARU) MODEL-MODEL BARU DITAMBAHKAN ---

// Model untuk Pengguna (bisa Host atau Guest)
model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  name       String?
  password   String     // Diasumsikan password di-hash
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  properties Property[] // Seorang User bisa memiliki banyak properti (jika dia Host)
  bookings   Booking[]  // Seorang User bisa memiliki banyak booking (jika dia Guest)
}

// Model untuk Booking
model Booking {
  id         Int         @id @default(autoincrement())
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Decimal     @db.Decimal(12, 2)
  status     String      // Contoh: PENDING, CONFIRMED, CANCELLED
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  guest      User        @relation(fields: [guestId], references: [id])
  guestId    Int

  property   Property    @relation(fields: [propertyId], references: [id])
  propertyId Int

  transactions Transaction[] // Sebuah booking bisa memiliki beberapa transaksi
}

// Model untuk Transaksi Finansial
model Transaction {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  type        TransactionType // Menggunakan Enum di bawah
  amount      Decimal         @db.Decimal(12, 2)
  currency    String          @default("IDR")
  description String

  booking     Booking         @relation(fields: [bookingId], references: [id])
  bookingId   Int

  property    Property        @relation(fields: [propertyId], references: [id])
  propertyId  Int
}

// Enum untuk tipe transaksi yang konsisten
enum TransactionType {
  BOOKING_REVENUE
  PLATFORM_FEE
  CLEANING_FEE
  REFUND
  HOST_PAYOUT
}
